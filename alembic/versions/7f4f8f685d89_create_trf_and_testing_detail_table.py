"""create trf and testing detail table

Revision ID: 7f4f8f685d89
Revises: 908e7197e8c9
Create Date: 2024-01-17 21:06:00.762528

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7f4f8f685d89'
down_revision: Union[str, None] = '908e7197e8c9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('test_request_forms',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('trf_code', sa.String(), nullable=True),
    sa.Column('date_of_registration', sa.Date(), nullable=True),
    sa.Column('sample_id', sa.String(), nullable=True),
    sa.Column('sample_name', sa.String(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('manufactured_by', sa.String(), nullable=True),
    sa.Column('batch_or_lot_no', sa.String(), nullable=True),
    sa.Column('manufactured_date', sa.Date(), nullable=True),
    sa.Column('expiry_date', sa.Date(), nullable=True),
    sa.Column('batch_size', sa.Integer(), nullable=True),
    sa.Column('format_name', sa.String(), nullable=True),
    sa.Column('nabl_logo', sa.Boolean(), nullable=True),
    sa.Column('no_of_samples', sa.Integer(), nullable=True),
    sa.Column('sample_storage_condition', sa.Text(), nullable=True),
    sa.Column('sampling_by', sa.Enum('CUSTOMER', 'LABORATORY', name='samplingbyenum'), nullable=True),
    sa.Column('testing_process', sa.ARRAY(sa.Enum('BATCH_ANALYSIS', 'METHOD_DEVELOPMENT', 'METHOD_VALIDATION', 'RD_RESEARCH', 'REGULATORY', name='testingprocessenum')), nullable=True),
    sa.Column('report_sent_by', sa.ARRAY(sa.Enum('COURIER', 'EMAIL', name='reportsentbyenum')), nullable=True),
    sa.Column('sample_disposal_process', sa.Enum('DISCARD', 'RETURN', name='disposalprocessenum'), nullable=True),
    sa.Column('fail_statement_sent', sa.Enum('YES', 'NO', name='yesornoenum'), nullable=True),
    sa.Column('specific_decision_rule', sa.Enum('YES', 'NO', name='yesornoenum'), nullable=True),
    sa.Column('binary_decision_rule', sa.Enum('YES', 'NO', name='yesornoenum'), nullable=True),
    sa.Column('submission_of_documents', sa.ARRAY(sa.Enum('MSDS', 'COA', 'IFU', 'IF_ANY_OTHER', name='documentstypeenum')), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('branch_id', sa.Integer(), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('testing_detail',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('priority_order', sa.Integer(), nullable=False),
    sa.Column('trf_id', sa.Integer(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['parameter_id'], ['testingparameters.id'], ),
    sa.ForeignKeyConstraint(['trf_id'], ['test_request_forms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('testtype_association',
    sa.Column('test_type_id', sa.Integer(), nullable=True),
    sa.Column('trf_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['test_type_id'], ['testtypes.id'], ),
    sa.ForeignKeyConstraint(['trf_id'], ['test_request_forms.id'], )
    )
    op.add_column('customerfollowups', sa.Column('trf_id', sa.Integer(), nullable=True))
    op.create_unique_constraint(None, 'customerfollowups', ['trf_id'])
    op.create_foreign_key(None, 'customerfollowups', 'test_request_forms', ['trf_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'customerfollowups', type_='foreignkey')
    op.drop_constraint(None, 'customerfollowups', type_='unique')
    op.drop_column('customerfollowups', 'trf_id')
    op.drop_table('testtype_association')
    op.drop_table('testing_detail')
    op.drop_table('test_request_forms')
    # ### end Alembic commands ###
