"""new changes on front desk

Revision ID: 83b52f9f3f72
Revises: 79c372f18545
Create Date: 2024-05-29 10:04:40.756934

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '83b52f9f3f72'
down_revision: Union[str, None] = '79c372f18545'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('DAMAGED', 'GOOD', name='receivedcondition').create(op.get_bind())
    op.add_column('frontdesks', sa.Column('received_condition', postgresql.ENUM('DAMAGED', 'GOOD', name='receivedcondition', create_type=False), nullable=False))
    op.drop_column('frontdesks', 'sample_condition')
    op.add_column('registrations', sa.Column('sample_name', sa.String(), nullable=True))
    op.add_column('registrations', sa.Column('received_quantity', sa.Integer(), nullable=True))
    op.alter_column('registrations', 'batch_or_lot_no',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('registrations', 'manufactured_date',
               existing_type=sa.DATE(),
               nullable=True)
    op.alter_column('registrations', 'expiry_date',
               existing_type=sa.DATE(),
               nullable=True)
    op.alter_column('registrations', 'batch_size',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('registrations', 'no_of_samples',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.add_column('samples', sa.Column('sample_name', sa.String(), nullable=True))
    op.add_column('samples', sa.Column('batch_or_lot_no', sa.String(), nullable=True))
    op.add_column('samples', sa.Column('manufactured_date', sa.Date(), nullable=True))
    op.add_column('samples', sa.Column('expiry_date', sa.Date(), nullable=True))
    op.add_column('samples', sa.Column('batch_size', sa.Integer(), nullable=True))
    op.add_column('samples', sa.Column('received_quantity', sa.Integer(), nullable=True))
    sa.Enum('DAMAGED', 'GOOD', name='samplecondition').drop(op.get_bind())
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('DAMAGED', 'GOOD', name='samplecondition').create(op.get_bind())
    op.drop_column('samples', 'received_quantity')
    op.drop_column('samples', 'batch_size')
    op.drop_column('samples', 'expiry_date')
    op.drop_column('samples', 'manufactured_date')
    op.drop_column('samples', 'batch_or_lot_no')
    op.drop_column('samples', 'sample_name')
    op.alter_column('registrations', 'no_of_samples',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('registrations', 'batch_size',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('registrations', 'expiry_date',
               existing_type=sa.DATE(),
               nullable=False)
    op.alter_column('registrations', 'manufactured_date',
               existing_type=sa.DATE(),
               nullable=False)
    op.alter_column('registrations', 'batch_or_lot_no',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('registrations', 'received_quantity')
    op.drop_column('registrations', 'sample_name')
    op.add_column('frontdesks', sa.Column('sample_condition', postgresql.ENUM('DAMAGED', 'GOOD', name='samplecondition', create_type=False), autoincrement=False, nullable=False))
    op.drop_column('frontdesks', 'received_condition')
    sa.Enum('DAMAGED', 'GOOD', name='receivedcondition').drop(op.get_bind())
    # ### end Alembic commands ###
