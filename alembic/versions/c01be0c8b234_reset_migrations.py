"""reset migrations

Revision ID: c01be0c8b234
Revises: 
Create Date: 2024-01-19 11:25:32.727426

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'c01be0c8b234'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('branches',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('branch_name', sa.String(), nullable=True),
    sa.Column('address_line1', sa.String(), nullable=True),
    sa.Column('address_line2', sa.String(), nullable=True),
    sa.Column('mobile_number', sa.String(), nullable=True),
    sa.Column('landline_number', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('pan_no', sa.String(), nullable=True),
    sa.Column('cin', sa.String(), nullable=True),
    sa.Column('gstin', sa.String(), nullable=True),
    sa.Column('bank_details', sa.String(), nullable=True),
    sa.Column('ifsc_code', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('customers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('customer_code', sa.String(), nullable=True),
    sa.Column('company_name', sa.String(), nullable=True),
    sa.Column('company_id', sa.String(), nullable=True),
    sa.Column('customer_address_line1', sa.String(), nullable=True),
    sa.Column('customer_address_line2', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('pincode_no', sa.String(), nullable=True),
    sa.Column('website', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('nature_of_business', sa.String(), nullable=True),
    sa.Column('product_details', sa.String(), nullable=True),
    sa.Column('market', sa.String(), nullable=True),
    sa.Column('regulatory', sa.String(), nullable=True),
    sa.Column('pan', sa.String(), nullable=True),
    sa.Column('gst', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('testtypes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('date_joined', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_staff', sa.Boolean(), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), nullable=True),
    sa.Column('role', sa.Enum('HOD', 'MARKETING', 'ADMIN', 'MANAGEMENT', 'ANALYST', name='roletype'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('contactpersons',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.Column('person_name', sa.String(), nullable=True),
    sa.Column('designation', sa.String(), nullable=True),
    sa.Column('mobile_number', sa.String(), nullable=True),
    sa.Column('landline_number', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('branch_id', sa.Integer(), nullable=True),
    sa.Column('product_code', sa.String(), nullable=True),
    sa.Column('product_name', sa.String(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('test_request_forms',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('trf_code', sa.String(), nullable=True),
    sa.Column('date_of_registration', sa.Date(), nullable=True),
    sa.Column('sample_id', sa.String(), nullable=True),
    sa.Column('sample_name', sa.String(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('manufactured_by', sa.String(), nullable=True),
    sa.Column('batch_or_lot_no', sa.String(), nullable=True),
    sa.Column('manufactured_date', sa.Date(), nullable=True),
    sa.Column('expiry_date', sa.Date(), nullable=True),
    sa.Column('batch_size', sa.Integer(), nullable=True),
    sa.Column('format_name', sa.String(), nullable=True),
    sa.Column('nabl_logo', sa.Boolean(), nullable=True),
    sa.Column('no_of_samples', sa.Integer(), nullable=True),
    sa.Column('sample_storage_condition', sa.Text(), nullable=True),
    sa.Column('sampling_by', sa.Enum('CUSTOMER', 'LABORATORY', name='samplingbyenum'), nullable=True),
    sa.Column('testing_process', sa.ARRAY(sa.Enum('BATCH_ANALYSIS', 'METHOD_DEVELOPMENT', 'METHOD_VALIDATION', 'RD_RESEARCH', 'REGULATORY', name='testingprocessenum')), nullable=True),
    sa.Column('report_sent_by', sa.ARRAY(sa.Enum('COURIER', 'EMAIL', name='reportsentbyenum')), nullable=True),
    sa.Column('sample_disposal_process', sa.Enum('DISCARD', 'RETURN', name='disposalprocessenum'), nullable=True),
    sa.Column('fail_statement_sent', sa.Enum('YES', 'NO', name='yesornoenum'), nullable=True),
    sa.Column('specific_decision_rule', sa.Enum('YES', 'NO', name='yesornoenum'), nullable=True),
    sa.Column('binary_decision_rule', sa.Enum('YES', 'NO', name='yesornoenum'), nullable=True),
    sa.Column('submission_of_documents', sa.ARRAY(sa.Enum('MSDS', 'COA', 'IFU', 'IF_ANY_OTHER', name='documentstypeenum')), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('branch_id', sa.Integer(), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('testingparameters',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('branch_id', sa.Integer(), nullable=True),
    sa.Column('test_type_id', sa.Integer(), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('parameter_code', sa.String(), nullable=True),
    sa.Column('testing_parameters', sa.String(), nullable=True),
    sa.Column('amount', sa.DECIMAL(precision=19, scale=4), nullable=True),
    sa.Column('method_or_spec', sa.String(), nullable=True),
    sa.Column('group_of_test_parameters', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['test_type_id'], ['testtypes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('customerfollowups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('marketing_status', sa.Enum('NONE', 'MAIL_SENT', 'ENQUIRES_RECEIVED', 'QUOTE_SENT', 'MARKETING_PLAN', 'SITE_VISITED', 'LAB_VISIT_PLAN', 'LAB_VISITED', 'FOLLOWUP', 'WON', 'WORK_IN_PROGRESS', 'HOLD', 'LOST', 'SAMPLE_RECEIVED', name='marketingstatus'), nullable=True),
    sa.Column('assign_to', sa.Integer(), nullable=True),
    sa.Column('date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.Column('trf_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['assign_to'], ['users.id'], ),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['trf_id'], ['test_request_forms.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('trf_id')
    )
    op.create_table('testing_detail',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('priority_order', sa.Integer(), nullable=False),
    sa.Column('trf_id', sa.Integer(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['parameter_id'], ['testingparameters.id'], ),
    sa.ForeignKeyConstraint(['trf_id'], ['test_request_forms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('testtype_association',
    sa.Column('test_type_id', sa.Integer(), nullable=True),
    sa.Column('trf_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['test_type_id'], ['testtypes.id'], ),
    sa.ForeignKeyConstraint(['trf_id'], ['test_request_forms.id'], )
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('testtype_association')
    op.drop_table('testing_detail')
    op.drop_table('customerfollowups')
    op.drop_table('testingparameters')
    op.drop_table('test_request_forms')
    op.drop_table('products')
    op.drop_table('contactpersons')
    op.drop_table('users')
    op.drop_table('testtypes')
    op.drop_table('customers')
    op.drop_table('branches')
    # ### end Alembic commands ###
